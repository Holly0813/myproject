{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ee1cd7b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from collections import Counter\n",
    "import matplotlib.ticker as ticker\n",
    "from matplotlib.pyplot import MultipleLocator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "32c485b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000 19 <class 'pandas.core.frame.DataFrame'>\n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "北京邮电大学专利最主要IPC主分类号\n",
    "'''\n",
    "\n",
    "# 读取数据\n",
    "\n",
    "#原excel表格所在位置\n",
    "file_path = r'E:/我的又一个桌面/大创/项目内容/北邮一万条数据.XLSX'\n",
    "\n",
    "# test\n",
    "#file_path = r'D:/jupyter-notebook/ProjectChuang/test.xlsx'\n",
    "\n",
    "#读取Excel表格，默认读取第一个工作簿，输出表格信息\n",
    "df = pd.read_excel(file_path)\n",
    "height, width = df.shape\n",
    "print(height, width, type(df))\n",
    "\n",
    "# 获取主分类号并进行拆分\n",
    "ipc_data = df['IPC主分类号']\n",
    "i = 0\n",
    "left = []\n",
    "for ipc in ipc_data:\n",
    "    index = ipc.find(\"/\")\n",
    "    left.append(ipc[:index].strip())\n",
    "    i+=1\n",
    "#print(left)\n",
    "#print(i)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "74be4ef7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Counter({'H04L12': 605, 'H04L29': 517, 'G06K9': 465, 'G06F16': 440, 'H04B10': 363, 'H04L9': 313, 'H04B7': 293, 'H04W4': 258, 'H04W16': 250, 'H04W72': 228, 'H04L1': 227, 'G06F17': 226, 'G06F21': 214, 'H04W24': 195, 'H04L27': 195, 'G06F9': 175, 'G06Q10': 172, 'H04W28': 169, 'G06T7': 162, 'H04B17': 138, 'H01Q1': 115, 'H04W40': 108, 'G06F11': 106, 'H04W52': 105, 'G06F40': 95, 'G06N3': 92, 'H04W36': 92, 'H04L25': 90, 'H04W64': 89, 'H04L67': 87, 'H04Q11': 85, 'H04W12': 81})\n"
     ]
    }
   ],
   "source": [
    "# 对IPC主分类数进行计数\n",
    "ipc_counts = Counter(left)\n",
    "# print(ipc_counts)\n",
    "\n",
    "threshold = 80\n",
    "\n",
    "for key, value in list(ipc_counts.items()):\n",
    "    if value <= threshold:\n",
    "        ipc_counts.pop(key)\n",
    "print(ipc_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "08ceafcb",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 绘制条形图\n",
    "# 中文显示\n",
    "plt.rcParams['font.sans-serif'] = ['SimHei']\n",
    "plt.rcParams['axes.unicode_minus'] = False\n",
    "\n",
    "plt.bar(ipc_counts.keys(), ipc_counts.values(), width = 0.8)\n",
    "plt.xticks(rotation=90, fontsize=8)\n",
    "plt.xlabel('IPC主分类')\n",
    "plt.ylabel('专利数量')\n",
    "\n",
    "fig = plt.gcf()\n",
    "fig.set_size_inches(8, 6)\n",
    "\n",
    "plt.savefig(r'D:\\jupyter-notebook\\ProjectChuang/ipc_bar_chart.jpg', dpi=300,  bbox_inches='tight')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7067eb42",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d8528d61",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
